/*
 * ds2_mt_order.pc: Oracle ProC DS2 Driver - multithreaded version - for Oracle ProC precompiler
 *
 * Copyright (C) 2005 Dell, Inc. <dave_jaffe@dell.com>, <tmuirhead@vmware.com> and <deepak_janakiraman.com>
 *
 * Generates orders against Oracle version of DVD Store Database V.2 
 * Simulates users logging in to store or creating new customer data; browsing for DVDs by title, actor or 
 * category, and purchasing selected DVDs
 *
 * syntax:  ds2_mt_order database_db_connect_string n_threads <reset_time(min) <run_time(min) <S|M|L>>>
 *
 * To compile: make_ds2_mt_10g ds2_mt_order
 *
 * Last Updated 9/8/05
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA  */

#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <sqlda.h>
#include <sqlca.h>
#include <sqlcpr.h>
#include <math.h>
#include <windows.h>
#include <winbase.h>
#include <process.h>

#include "..\data_files\prod\ds2_data.h"

// Defines
#define MAX_THREADS 1000
#define MAX_ROWS 100
#define MAX_CUSTOMER_SMALL     20000
#define MAX_CUSTOMER_MED     2000000
#define MAX_CUSTOMER_LARGE 200000000
#define MAX_PRODUCT_SMALL   10000
#define MAX_PRODUCT_MED    100000
#define MAX_PRODUCT_LARGE 1000000
#define MAX_CATEGORY 16

typedef char vc2_arr[50];

// Functions
void EmulateUser(void *pv_i_thread);
void err_report(struct sqlca, int i_thread);
long irand(int i_thread);
int random1(int i, int j, int i_thread);

// Globals

BOOL finished=0;
int n_trans_total=0, n_finished=0, n_login_total=0, n_newcust_total=0;
int n_browse_total=0, n_purchase_total=0, n_rollback_total=0;
int max_customer, max_product;
double freqd, rt_total=0.0, rt_newcust_total=0.0, rt_login_total=0.0;
double rt_browse_total=0.0, rt_purchase_total=0.0;
CRITICAL_SECTION update_crit_sec, finish_crit_sec;
char db_connect_string[80];
long Seed_array[MAX_THREADS];
int prod_array[1001000], prod_array_size;

EXEC SQL BEGIN DECLARE SECTION;
sql_context ctx[1000];
EXEC SQL TYPE vc2_arr IS VARCHAR2(50) REFERENCE;
EXEC SQL END DECLARE SECTION;


void main(int argc, char* argv[])
  {
  int n_threads, i_thread; 
  double reset_time=0.0, run_time=0.0;
  LARGE_INTEGER tick_count0, tick_count, freq;
  double et;
  char t[10];
  int dbsize=0; // 0=S  1=M  2=L
  char dbsize_str[7];
  char *dbsize_str_array[] = {"small", "medium", "large"};
  int max_customer_arr[] = {MAX_CUSTOMER_SMALL, MAX_CUSTOMER_MED, MAX_CUSTOMER_LARGE};
  int max_product_arr[] = {MAX_PRODUCT_SMALL, MAX_PRODUCT_MED, MAX_PRODUCT_LARGE};
  int i, j, k;

  // Check syntax
  if (argc < 3)
    {
    fprintf(stderr, "Syntax: ds2_mt_order database_db_connect_string n_threads <reset_time(min) <run_time(min) <S|M|L>>>\n");
    exit(-1);
    }
  strcpy(db_connect_string, argv[1]);
  n_threads = atoi(argv[2]);
  if (argc >= 4) reset_time = atof(argv[3]);
  if (argc >= 5) run_time = atof(argv[4]);
  if (argc == 6) 
    {
    if (toupper(argv[5][0])=='M') dbsize = 1;
    else if (toupper(argv[5][0])=='L') dbsize = 2;
    }
  strcpy(dbsize_str, dbsize_str_array[dbsize]);
 
  if (argc == 3) fprintf(stderr, "Starting %d ds instances to drive small database %s for indefinite length without reset\n\n", 
    n_threads, db_connect_string);
  if (argc == 4) fprintf(stderr, "Starting %d ds instances to drive small database %s for indefinite length with reset in %.1f min\n\n", 
    n_threads, db_connect_string, reset_time);
  if (argc == 5) fprintf(stderr, "Starting %d ds instances to drive small database %s for %.1f min with reset in %.1f min\n\n", 
    n_threads, db_connect_string, run_time, reset_time);
  if (argc == 6) fprintf(stderr, "Starting %d ds instances to drive %s database %s for %.1f min with reset in %.1f min\n\n", 
    n_threads, dbsize_str, db_connect_string, run_time, reset_time);

  max_customer = max_customer_arr[dbsize];
  max_product = max_product_arr[dbsize];
  printf("max_customer= %d  max_product= %d\n", max_customer, max_product);

  // Set up array to choose product ids from, weighted with more entries for popular products
  // Popular products (in this case every 10,000th) will have 10 entries in list, others just 1
  i=0;
  for (j=1; j<=max_product; j++)
    {
    if ((j % 10000) == 0) for (k=0; k<10; k++) prod_array[i++]=j;
    else prod_array[i++] = j;
    }
  prod_array_size = i;
  printf("%d products in array\n", prod_array_size);

  QueryPerformanceFrequency(&freq);
  freqd = (double) freq.QuadPart;

  InitializeCriticalSection(&update_crit_sec);
  InitializeCriticalSection(&finish_crit_sec);

  EXEC SQL ENABLE THREADS;
  EXEC SQL WHENEVER SQLERROR DO err_report(sqlca, 0);

  for (i_thread=1; i_thread <= n_threads; i_thread++)
    {
    EXEC SQL CONTEXT ALLOCATE :ctx[i_thread];
    _beginthread(EmulateUser, 0, (void *) i_thread);
    Sleep(100);  //ramp 10 users/second
    }

  fprintf(stderr, "All users active\n");

  // Clear all timers and variables
  QueryPerformanceCounter(&tick_count0);  // Get initial number of clock ticks on 64 bit counter
  et = 0.0;         // Elapsed Time
  EnterCriticalSection(&update_crit_sec);
    n_trans_total     = 0;
    n_newcust_total   = 0;
    n_login_total     = 0;
    n_browse_total    = 0;
    n_purchase_total  = 0;
    n_rollback_total  = 0;   
    rt_total          = 0.0; 
    rt_login_total    = 0.0;  
    rt_newcust_total  = 0.0;
    rt_browse_total   = 0.0;
    rt_purchase_total = 0.0;
  LeaveCriticalSection(&update_crit_sec);

  do  // main do loop
    {
    Sleep(6000);  // .1 min

    QueryPerformanceCounter(&tick_count);  // Get current number of clock ticks
    et = (((double)(tick_count.QuadPart - tick_count0.QuadPart))/freqd)/60.0;  // elapsed time in min
    _strtime(t);
    fprintf(stderr, "%s: %d trans in %.1f min or %.0f tpm w/ ART= %.3f sec,"
      " ART-login=%.3f ART-newcust=%.3f ART-browse=%.3f ART-purchase=%.3f,"
      " n_login=%d n_newcust=%d n_browse=%d n_purchase=%d n_rollback=%d rollback_pct=%.1f\n",
      t, n_trans_total, et, (double) n_trans_total/et, rt_total/(double) n_trans_total,
      rt_login_total/(double)n_login_total,
      rt_newcust_total/(double)n_newcust_total, 
      rt_browse_total/(double)n_browse_total,
      rt_purchase_total/(double)n_purchase_total,
      n_login_total, n_newcust_total, n_browse_total, n_purchase_total, n_rollback_total, 100.0*n_rollback_total/(double) n_trans_total);

    if ((reset_time != 0.0) && (et > reset_time)) 
      {
      QueryPerformanceCounter(&tick_count0);
      et = 0.0;
      EnterCriticalSection(&update_crit_sec);
        n_trans_total     = 0;
        n_newcust_total   = 0;
        n_login_total     = 0;
        n_browse_total    = 0;
        n_purchase_total  = 0;
        n_rollback_total  = 0;      
        rt_total          = 0.0;
        rt_login_total    = 0.0;  
        rt_newcust_total  = 0.0;
        rt_browse_total   = 0.0;
        rt_purchase_total = 0.0;
      LeaveCriticalSection(&update_crit_sec);
      reset_time = 0.0; 
      _strtime(t);
      fprintf(stderr, "%s: Resetting statistics and timer\n", t);
      }

    if ((reset_time == 0.0) && (run_time != 0.0) && (et > run_time)) finished = 1;  // tell all threads to stop
    } while (!finished);  // end main do loop 

  QueryPerformanceCounter(&tick_count);  // Get current number of clock ticks
  et = (((double)(tick_count.QuadPart - tick_count0.QuadPart))/freqd)/60.0; 
  _strtime(t);

  EnterCriticalSection(&update_crit_sec);
    fprintf(stdout, "\n%s:Finished %d trans in %.1f min or %.0f tpm w/ ART= %.3f sec,"
      " ART-login=%.3f ART-newcust=%.3f ART-browse=%.3f ART-purchase=%.3f,"
      " n_login=%d n_newcust=%d n_browse=%d n_purchase=%d n_rollback=%d rollback_pct=%.1f\n",
      t, n_trans_total, et, (double) n_trans_total/et, rt_total/(double) n_trans_total,
      rt_login_total/(double)n_login_total,
      rt_newcust_total/(double)n_newcust_total, 
      rt_browse_total/(double)n_browse_total,
      rt_purchase_total/(double)n_purchase_total,
      n_login_total, n_newcust_total, n_browse_total, n_purchase_total, n_rollback_total, 100.0*n_rollback_total/(double) n_trans_total);
  LeaveCriticalSection(&update_crit_sec);

  while(n_finished < n_threads) Sleep(1000);  // Wait for all threads to stop
  } //End of Main program

void EmulateUser(void *pv_i_thread)
  {
  int i_thread = (int) pv_i_thread;          // Cast it back to integer
  int i, i_user, n_trans;
  LARGE_INTEGER tick_count0, tick_count, tick_count2, freq;
  double rt_newcust, rt_login, rt_browse, rt_purchase, rt;
  unsigned short lo8;
  unsigned long seed;

  char* db_username = "ds2";
  char* db_password = "ds2";
  char username_in[25], password_in[25];
  int      prev_order_prod_id_out[10], prev_order_match_id_out[10]; 
  short    popid_indic_array[10], pomid_indic_array[10]; 
  int      prod_id_out[MAX_ROWS], category_out[MAX_ROWS], special_out[MAX_ROWS], common_prod_id_out[MAX_ROWS];
  vc2_arr  title_out[MAX_ROWS], related_title_out[MAX_ROWS], actor_out[MAX_ROWS], title_temp, related_title_temp, actor_temp;
  float    price_out[MAX_ROWS];
  short    pid_indic_array[MAX_ROWS], cout_indic_array[MAX_ROWS], title_indic_array[MAX_ROWS], related_title_indic_array[MAX_ROWS];
  short    actor_indic_array[MAX_ROWS], pout_indic_array[MAX_ROWS], special_indic_array[MAX_ROWS], common_prod_id_indic_array[MAX_ROWS];
  int      product_id_in[MAX_ROWS], qty_in[MAX_ROWS];
  float    netamount_out, taxamount_out, totalamount_out;
  int      category_in, i_row;
  char     title[50], related_title[50], actor[50];
  char     a[6], b[10], c[10], firstname_in[25], city_in[25], state_in[25];
  char     lastname_in[25], address1_in[25], address2_in[25];
  char     email_in[25], phone_in[25], creditcard_in[25], country_in[25], gender_in[5];
  char     creditcardexpiration_in[25], ziptemp_in[25], actorid_in[20], actor_in[50], title_in[50];
  int      creditcardtype_in, i_month, i_yr, j, k, l, i_rand;
  int      customerid_out, neworderid_out;
  int      cart_items,  m,  user_type, choose_region, country_index, state_index, region;
  int      n_newcust, n_login, n_browse, n_purchase, n_rollback, num_desired, num_ret;
  int      n_browse_actor, id_in, browse_type,zip_in,age_in,income_in;

  char *states[] = {"AK", "AL", "AR", "AZ", "CA", "CO", "CT", "DC", "DE", "FL", "GA", "HI", "IA", "ID", "IL", "IN", 
                  "KS", "KY", "LA", "MA", "MD", "ME", "MI", "MN", "MO", "MS", "MT", "NC", "ND", "NE", "NH", "NJ",
                  "NM", "NV", "NY", "OH", "OK", "OR", "PA", "RI", "SC", "SD", "TN", "TX", "UT", "VA", "VT", "WA",
                  "WI", "WV", "WY"};

  char *countries[] = {"Australia", "Canada", "Chile", "China", "France", "Germany", "Japan", "Russia", "South Africa", "UK"};
 
  fprintf(stderr, "Thread %d: Started\n", i_thread);

  EXEC SQL WHENEVER SQLERROR DO err_report(sqlca, i_thread);

  EXEC SQL CONTEXT USE :ctx[i_thread];

  // Connect to ORACLE

  EXEC SQL CONNECT :db_username IDENTIFIED BY :db_password USING :db_connect_string;

  fprintf(stderr, "Thread %d: Connected to Oracle\n", i_thread);

  // Use 64-bit clock to randomize seed for thread
  seed = 0;
  for (i=0; i<4; i++)
    {
    seed <<= 8; 
  Sleep(1);
    QueryPerformanceCounter(&tick_count);
//  printf("Performance tick_counter:  hi= %#lx   lo= %#lx   quad= %#I64x\n", 
//    tick_count.HighPart, tick_count.LowPart, tick_count.QuadPart);
    lo8 = 0xFF & tick_count.LowPart;
    seed = seed | lo8;
//  printf("lo8= %02hx  seed= %08lx\n", lo8, seed);
    }
  Seed_array[i_thread] = seed & 0x7FFFFFFF;
//printf("Thread %d, Seed= %u\n", i_thread, Seed_array[i_thread]);

  do  //Emulate User main loop
    {
    n_trans = 0;
    n_newcust = 0; n_login = 0; n_browse = 0; n_purchase = 0;  n_rollback = 0; n_browse_actor = 0;
    rt=0; rt_browse=0; rt_purchase=0; rt_newcust = 0;  rt_login = 0; 


    // LOGIN Phase
    user_type = random1(1, 100, i_thread);

    if (user_type > 20) // 20% new users 
      {
      //Returning user with randomized username

      i_user = random1(1, max_customer, i_thread);
      sprintf(username_in, "user%d", i_user);
      strcpy(password_in, "password");
      num_desired = 10;
      num_ret = 0;
      customerid_out = -1;

      QueryPerformanceCounter(&tick_count0);  // Start response time clock
      EXEC SQL EXECUTE 
        BEGIN
          DS2.LOGIN(:username_in, :password_in, :num_desired, :num_ret, :customerid_out, :title_out:title_indic_array, 
                    :actor_out:actor_indic_array, :related_title_out:related_title_indic_array);
        END;
      END-EXEC;
      QueryPerformanceCounter(&tick_count);  // Stop response time clock

      if (customerid_out == 0)
        {
        printf("Login failed, exiting: username_in= %s  password_in= %s\n", username_in, password_in);
        exit(-1);
        }

/*
      printf("Thread %d: LOGIN: username_in= %s  customerid_out= %d  number desired= %d  number returned= %d\n", 
        i_thread, username_in, customerid_out, num_desired, num_ret);
      for (i=0; i<num_ret; i++)
        {
        strncpy(title_temp, title_out[i], 50); title_temp[50] = '\0';
        strncpy(actor_temp, actor_out[i], 50); actor_temp[50] = '\0';
        strncpy(related_title_temp, related_title_out[i], 50); related_title_temp[50] = '\0';
        printf("  Prev order line %d:  title= %s  actor= %s  related_title= %s\n", i+1, title_temp, actor_temp, related_title_temp);
        }
*/
      rt_login = ((double)(tick_count.QuadPart - tick_count0.QuadPart))/freqd; 
      n_login = 1;
      }

    //New User with randomized username

    else
      {
      i_user = random1(1, max_customer, i_thread);

      for (j=0; j<6; j++)
        {
        a[j] = random1(65, 90, i_thread);
        } //End of For 
      sprintf(firstname_in, "%c%c%c%c%c%c", a[0], a[1], a[2], a[3], a[4], a[5]);

      for (j=0; j<10; j++)
        {
        b[j] = random1(65, 90, i_thread);
        } //End of For 
      sprintf(lastname_in, "%c%c%c%c%c%c%c%c%c%c", b[0], b[1], b[2], b[3], b[4], b[5], b[6], b[7], b[8], b[9]);
    
      for (j=0; j<7; j++)
        {
        c[j] = random1(65, 90, i_thread);
        } //End of For
      sprintf(city_in, "%c%c%c%c%c%c%c", c[0], c[1], c[2], c[3], c[4], c[5], c[6]);
      
      choose_region = (i_user%2) + 1;    //US=1 or ROW=2

      if (choose_region > 1)
        {     
        zip_in = 0;
        strcpy(state_in, "");
        country_index = random1(0, 9, i_thread);
        strcpy(country_in, countries[country_index]);
        region = 2;
        }
      else
        {
        zip_in = random1(1, 99999, i_thread);
        state_index = random1(0, 50, i_thread);
        strcpy(state_in, states[state_index]);
        strcpy(country_in, "US");
        region = 1;
        } //End Else
      
      sprintf(phone_in, "%d%07d", random1(100, 999, i_thread), random1(1, 9999999, i_thread));

      creditcardtype_in = random1(1, 5, i_thread);
      sprintf(creditcard_in, "%d%d", random1(10000000, 99999999, i_thread), random1(10000000, 99999999, i_thread));
      i_month = random1(1, 12, i_thread);
      i_yr = random1(2008, 2012, i_thread);
      sprintf(creditcardexpiration_in,"%4d/%02d", i_yr, i_month);
      
      sprintf(address1_in, "%s Dell Way", phone_in);
      sprintf(address2_in, "");
      
      sprintf(email_in, "%s@dell.com", lastname_in);      
      
      sprintf(username_in, "newuser%d", i_user);  
      
      strcpy(password_in, "password");
      
      age_in = random1(18, 99, i_thread);
      
      income_in = 20000 * random1(1, 5, i_thread); // >$20,000, >$40,000, >$60,000, >$80,000, >$100,000

      if(random1(0, 1, i_thread)) strcpy(gender_in, "M");
      else strcpy(gender_in, "F");

      QueryPerformanceCounter(&tick_count0);  // Start response time clock
      EXEC SQL EXECUTE 
        BEGIN
        DS2.NEW_CUSTOMER(:firstname_in, :lastname_in, :address1_in, :address2_in, :city_in, :state_in, :zip_in, :country_in, 
                         :region, :email_in, :phone_in, :creditcardtype_in, :creditcard_in, :creditcardexpiration_in, :username_in, 
             :password_in, :age_in, :income_in, :gender_in, :customerid_out);
        END;
      END-EXEC;

      while (customerid_out == 0)
        {
        printf("Thread %d:  username %s in use; selecting a new random one\n", i_thread, username_in);
    
        // Use 64-bit clock to re-randomize seed for thread
        seed = 0;
        for (i=0; i<4; i++)
          {
          seed <<= 8; 
        Sleep(1);
          QueryPerformanceCounter(&tick_count);
          lo8 = 0xFF & tick_count.LowPart;
          seed = seed | lo8;
          }
        Seed_array[i_thread] = seed & 0x7FFFFFFF;

        i_user = random1(1, max_customer, i_thread);
        sprintf(username_in, "newuser%d", i_user);

        EXEC SQL EXECUTE 
          BEGIN
            DS2.NEW_CUSTOMER(:firstname_in, :lastname_in, :address1_in, :address2_in, :city_in, :state_in, :zip_in, :country_in, 
                             :region, :email_in, :phone_in, :creditcardtype_in, :creditcard_in, :creditcardexpiration_in, :username_in, 
                             :password_in, :age_in, :income_in, :gender_in, :customerid_out);
          END;
        END-EXEC;
        };

      QueryPerformanceCounter(&tick_count);  // Stop response time clock
      rt_newcust = ((double)(tick_count.QuadPart - tick_count0.QuadPart))/freqd; 
      n_newcust = 1;

//    printf("Thread %d: NEW_CUSTOMER: username_in= %s\n", i_thread, username_in);
      } //End of Else (new user)

    // BROWSE Phase

    // Browse by Category: Browse 0-2 different categories with category randomized between 1-MAX_CATEGORY
    
    i_rand = random1(0, 2, i_thread);
    
//  printf("Thread %d, Seed= %u\n", i_thread, Seed_array[i_thread]);
    for (l=0; l<i_rand; l++)
      {
      category_in = random1(1, MAX_CATEGORY, i_thread);
      
      i_row = 1;
      num_desired = 5;
      num_ret = 0;
      QueryPerformanceCounter(&tick_count0);  // Start response time clock
      EXEC SQL EXECUTE 
        BEGIN
          BROWSE_BY_CATEGORY(:num_desired, :num_ret, :category_in, :prod_id_out:pid_indic_array, :category_out:cout_indic_array,
                             :title_out:title_indic_array, :actor_out:actor_indic_array, :price_out:pout_indic_array, 
							 :special_out:special_indic_array, :common_prod_id_out:common_prod_id_indic_array);
        END;
      END-EXEC;
      QueryPerformanceCounter(&tick_count);  // Stop response time clock
      rt_browse += ((double)(tick_count.QuadPart - tick_count0.QuadPart))/freqd; 
      ++n_browse;
      for (i=0; i<num_ret; i++) 
        {
        strncpy(title_temp, title_out[i], 50);
        title_temp[50] = '\0';
        strncpy(actor_temp, actor_out[i], 50);
        actor_temp[50] = '\0';
//      printf("Thread %d: BROWSE_BY_CATEGORY: prod_id= %d  category= %d  title= %s  actor= %s  price= %7.2f\n", 
//        i_thread, prod_id_out[i], category_out[i], title_temp, actor_temp, price_out[i]); 
        }
//    printf("Thread %d: BROWSE_BY_CATEGORY: category= %d\n", i_thread, category_in); 
        
      } //End of for loop for browse by category

    // Browse by Actor: Browse 0-2 different actors 

    i_rand = random1(0, 2, i_thread);

    for (l=0; l<i_rand; l++)
      {
      //sprintf(actor_in, "ELVIS WAYNE");
      sprintf(actor_in, "%s %s", actor_firstnames[random1(0, 199, i_thread)], actor_lastnames[random1(0, 199, i_thread)]);

      num_desired = 5;
      num_ret = 0;
      QueryPerformanceCounter(&tick_count0);  // Start response time clock
      EXEC SQL EXECUTE 
        BEGIN
          BROWSE_BY_ACTOR(:num_desired, :num_ret, :actor_in, :prod_id_out:pid_indic_array, :category_out:cout_indic_array, 
                          :title_out:title_indic_array, :actor_out:actor_indic_array, :price_out:pout_indic_array,
                          :special_out:special_indic_array, :common_prod_id_out:common_prod_id_indic_array);
        END;
      END-EXEC;
      QueryPerformanceCounter(&tick_count);  // Stop response time clock
      rt_browse += ((double)(tick_count.QuadPart - tick_count0.QuadPart))/freqd; 
      ++n_browse;

//    printf("Thread %d: BROWSE_BY_ACTOR: actor_in= %s  num_desired= %d  num_ret= %d\n", i_thread, actor_in, num_desired, num_ret);
      for (i=0; i<num_ret; i++) 
        {
        strncpy(title_temp, title_out[i], 50);
        title_temp[50] = '\0';
        strncpy(actor_temp, actor_out[i], 50);
        actor_temp[50] = '\0';
//      printf("prod_id= %d  category= %d  title= %s  actor= %s  price= %7.2f\n", 
//        prod_id_out[i], category_out[i], title_temp, actor_temp, price_out[i]); 
        }

      } //End of for loop for browse by actor name 


    // Browse by Title: Browse 0-2 different titles
    
    i_rand = random1(0, 2, i_thread);
  
    for (l=0; l<i_rand; l++)
      {
      id_in = random1(1, max_product, i_thread);
      sprintf(title_in, "%s %s", movie_titles[random1(0, 999, i_thread)], movie_titles[random1(0, 999, i_thread)]);

      num_desired = 5;
      num_ret = 0;
      QueryPerformanceCounter(&tick_count0);  // Start response time clock
      EXEC SQL EXECUTE 
        BEGIN
          BROWSE_BY_TITLE(:num_desired,:num_ret, :title_in, :prod_id_out:pid_indic_array, :category_out:cout_indic_array, 
                          :title_out:title_indic_array, :actor_out:actor_indic_array, :price_out:pout_indic_array,
                          :special_out:special_indic_array, :common_prod_id_out:common_prod_id_indic_array);
        END;
      END-EXEC;
      QueryPerformanceCounter(&tick_count);  // Stop response time clock
      rt_browse += ((double)(tick_count.QuadPart - tick_count0.QuadPart))/freqd; 
      ++n_browse;
      
//    printf("Thread %d: BROWSE_BY_TITLE: title_in= %s  num_desired= %d  num_ret= %d\n", i_thread, title_in, num_desired, num_ret);
      for (i=0; i<num_ret; i++) 
        {
        strncpy(title_temp, title_out[i], 50);
        title_temp[50] = '\0';
        strncpy(actor_temp, actor_out[i], 50);
        actor_temp[50] = '\0';
//      printf("prod_id= %d  category= %d  title= %s  actor= %s  price= %7.2f\n", 
//        prod_id_out[i], category_out[i], title_temp, actor_temp, price_out[i]); 
        }


      } //End of for loop for browse by title

    // Purchase phase

    // Randomize number of cart items added from 1-9

    cart_items = random1(1, 9, i_thread);

    // For each cart item randomize product_id, qty (1 - 3)
    for (k=0; k<cart_items; k++)
      {
      product_id_in[k] = prod_array[random1(0, prod_array_size, i_thread)];
      qty_in[k] = random1(1, 3, i_thread);
      }

//cart_items = 3
//product_id_in[0] = 1; qty_in[0]=1;
//product_id_in[1] = 2; qty_in[1]=2;
//product_id_in[2] = 3; qty_in[2]=3;

    netamount_out = 0.01 * random1(1, 40000, i_thread);
    taxamount_out = 0.0825 * netamount_out;
    totalamount_out = netamount_out + taxamount_out;

//  printf("Thread %d: Customer %d calling DS2.PURCHASE with %d items\n", i_thread, customerid_out, cart_items);
//  for(i=0; i<cart_items; i++) printf("item%d: prod_id= %d  qty= %d\n", i+1, product_id_in[i], qty_in[i]);

    QueryPerformanceCounter(&tick_count0);  // Start response time clock
    EXEC SQL EXECUTE 
      BEGIN
        DS2.PURCHASE(:customerid_out, :cart_items, :netamount_out, :taxamount_out, :totalamount_out, :neworderid_out, 
                     :product_id_in, :qty_in); 
      END;
    END-EXEC;
    QueryPerformanceCounter(&tick_count);  // Stop response time clock                          
    rt_purchase += ((double)(tick_count.QuadPart - tick_count0.QuadPart))/freqd; 
    n_purchase = 1;

//  printf("purchase rt= %f\n", rt_purchase);

//  printf("Thread %d: Purchase completed, orderid= %d\n", i_thread, neworderid_out);

  if (neworderid_out == 0) 
    {
    n_rollback = 1; 
//  printf("Thread %d: insufficient quantity for order: n_user=%d  n_items=%d\n", 
//    i_thread, customerid_out, cart_items);
//  for(i=0; i<cart_items; i++) printf("item%d: prod_id= %d  qty= %d\n", i+1, product_id_in[i], qty_in[i]);
    }

    rt = rt_newcust + rt_login + rt_browse + rt_purchase;
    n_trans = 1;

//  printf("thread= %d, n_trans=%d, n_purchase=%d usertype =%d\n", i_thread, n_trans, n_purchase, browse_type, user_type);
//  printf("User type = %d  Choose region = %d, region = %d\n",user_type,choose_region,region);

    EnterCriticalSection(&update_crit_sec);
      n_login_total      += n_login;
      n_newcust_total    += n_newcust;
      n_browse_total     += n_browse;
      n_purchase_total   += n_purchase; 
      n_rollback_total   += n_rollback; 
      n_trans_total      += n_trans;
      rt_newcust_total   += rt_newcust;
      rt_login_total     += rt_login;
      rt_browse_total    += rt_browse;
      rt_purchase_total  += rt_purchase;
      rt_total           += rt;
    LeaveCriticalSection(&update_crit_sec);
    EXEC SQL COMMIT;
//  Sleep(250); // .25 sec think time
    } while(!finished); // end EmulateUser do

  // Disconnect from the database
  EXEC SQL COMMIT WORK RELEASE;
  EXEC SQL CONTEXT FREE :ctx[i_thread];

  EnterCriticalSection(&finish_crit_sec);
    ++n_finished;
  LeaveCriticalSection(&finish_crit_sec);

  fprintf(stderr, "Thread %d: %d trans complete; exiting\n", i_thread, n_trans);
  } //End Emulate User

void err_report(struct sqlca sqlca, int i_thread)
  { 
  //if (sqlca.sqlcode < 0) 
    printf("Thread %d: Oracle detected error:\n%.*s\n\n", i_thread, sqlca.sqlerrm.sqlerrml,sqlca.sqlerrm.sqlerrmc); 
    return; 
  } 


//--------------------------------------irand-----------------------------------------
//
// irand() - uniform random integer generator - returns an integer between 1 and 2147483646
// 
#define A  48271
#define M  2147483647
#define Q  44488    // q = m div a
#define R  3399     // r = m mod a


long irand(int i_thread)
  {
  long Seed = Seed_array[i_thread];
  if ((Seed = (Seed % Q) * A - (Seed / Q) * R) < 0) Seed += M;

        Seed_array[i_thread] = Seed;
  return Seed;
  } // irand
//
//
//---------------------------------------random1---------------------------------------
//
// random1(i,j) - returns a random integer uniformly distributed between i and j,
//  inclusively  (assumes j >= i)                        
//
int random1(int i, int j, int i_thread)
  {
  return i + irand(i_thread) % (1+j-i);
  } //random1
//
//
